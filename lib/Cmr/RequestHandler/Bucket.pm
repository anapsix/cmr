#
#   Copyright (C) 2014 Chitika Inc.
#
#   This file is a part of Cmr
#
#   Cmr is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

package Cmr::RequestHandler::Bucket;

use parent Cmr::RequestHandler;
@EXPORT_OK = qw(handle_request_local);

use strict;
use warnings;

use threads;
use threads::shared;

sub handle_request_local {
    my ($self, $task, $config, $input, $output) = @_;
    return &Cmr::Types::CMR_RESULT_SUCCESS unless ${input};

    my $result = &Cmr::Types::CMR_RESULT_FAILURE;

    my @cmds;

    
    push @cmds, "chunky -s 16 ${input}";

    $task->{'prefix'} //= 'bucket';

    if ( $task->{'in_fmt_cmd'} ) {
        push @cmds, "$task->{'in_fmt_cmd'} ";
    }

    if ($task->{'mapper'}) {
        push @cmds, "$task->{'mapper'} --CMR_NAME mapper";
    }

    if ($task->{'join'}) {
        push @cmds, "cmr-bucket --sort --join --num-partitions $task->{'buckets'} --destination $task->{'out_path'} --map-id $task->{'map_id'} --prefix $task->{'prefix'}";
    }
    elsif ($task->{'strip_joinkey'}) {
        push @cmds, "cmr-bucket --strip-joinkey --num-aggregates $task->{'aggregates'} --num-partitions $task->{'buckets'} --destination $task->{'out_path'} --map-id $task->{'map_id'} --prefix $task->{'prefix'}";
    }
    else {
        push @cmds, "cmr-bucket --sort --num-aggregates $task->{'aggregates'} --num-partitions $task->{'buckets'} --destination $task->{'out_path'} --map-id $task->{'map_id'} --prefix $task->{'prefix'}";
    }

    my $timeout = $task->{'deadline'} - Time::HiRes::gettimeofday;
    if ($timeout < 0) { return $result; }
    my $cmd = "timeout -s KILL ${timeout} cmr-pipe --CMR_PIPE_UID $task->{'uid'} --CMR_PIPE_GID $task->{'gid'} " . join(' : ', @cmds);
    my $rc = &Cmr::RequestHandler::task_exec($task, $cmd);

    # The client doesn't know which files will have been generated by the cmr-bucket
    # Determine which files exist from the possible output set
    for my $part_id (0 .. $task->{'buckets'}-1) {
        my $destination = sprintf("%s/%s-%d-0-%d", $task->{'out_path'}, $task->{'prefix'}, $task->{'map_id'}, $part_id);
        if (-e $destination) {
            # Possible optimization, bucket destinations could be stored significantly more compactly by omitting constant parts of the path
            $task->{'bucket_destinations'} //= shared_clone([]);
            $task->{'bucket_destinations'}->[$part_id] //= shared_clone ([]);
            push $task->{'bucket_destinations'}->[$part_id], $destination;
        }
    }

    $result = &Cmr::Types::CMR_RESULT_SUCCESS if $rc == 0;
    return $result;
}

1;

