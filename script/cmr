#!/usr/bin/perl

#
#   Copyright (C) 2014 Chitika Inc.
#
#   This file is a part of Cmr
#
#   Cmr is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use warnings;

use File::Basename qw(dirname);
use Cwd qw(abs_path);
use lib  dirname(abs_path(__FILE__))."/../lib";
use Cmr::Client;
use Cmr::StartupUtils ();

my ($log, $config) = Cmr::StartupUtils::script_init({
    'description' => "Cluster map reduce client",
    'config' => "/etc/cmr/config.ini",
    'opts'         => [
        ['verbose|v',           'verbose output'],
        ['mapper|m=s',          'mapper command to invoke on each file batch'], 
        ['reducer|r=s',         'reduce command to invoke on each file batch'],
        ['initial-reducer|i=s', 'reducer to use for first reduce'],
        ['final-reducer|f=s',   'reducer to use for final reduce'],
        ['join-reducer|j=s',    'reducer to use for join [requires bucket and aggregate parameters to be specified]'],
        ['input|i=s@',          'input path (accepts glob pattern)'],
        ['output|o=s',          'output path'],
        ['persist|p=s',         'persist job output at a specified path in seaweed'],
        ['cleanup|c=s',         'clean up a persisted path in seaweed'],
        ['bundle|b=s@',         'bundle file with job'],
        ['force|F',             'force run (Will attempt to delete everything in the path specified by output before running)'],

    ],
    'no_lock' => 1,
});

my $cmr = Cmr::Client::new($config);

$SIG{'INT'} = sub { 
$cmr->scram(); 
my $jid = $cmr->{'reactor'}->{'jid'};
`curl -s $config->{global}->{seaweed_addr}/col/delete?collection=job_${jid}`;
`redis-cli -n 1 KEYS "job/${jid}*" | xargs redis-cli -n 1 DEL`;
`redis-cli -n 1 HDEL job ${jid}`;
};

if ( $config->{'cleanup'} ) {
    $cmr->cleanup();
}
elsif ( $config->{'bucket'} and $config->{'join_reducer'} ) {
    $cmr->bucket_join();
}
elsif ( $config->{'bucket'} ) {
    $cmr->bucket_stream();
}
else {
    $cmr->stream();
}

my $jid = $cmr->{'reactor'}->{'jid'};

# TODO: api all of this stuff
`curl -s $config->{global}->{seaweed_addr}/col/delete?collection=job_${jid}`;
`redis-cli -n 1 KEYS "job/${jid}*" | xargs redis-cli -n 1 DEL`;
`redis-cli -n 1 HDEL job ${jid}`;

if ( $cmr->failed() ) {
    $cmr->scram();
    exit(1);
}

if ( $cmr->finish() == &Cmr::Client::FAIL ) {
    exit(1);
}
