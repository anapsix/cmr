#!/usr/bin/perl

#
#   Copyright (C) 2014 Chitika Inc.
#
#   This file is a part of Cmr
#
#   Cmr is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use warnings;

use threads;
use threads::shared;

use File::Basename qw(dirname);
use Cwd qw(abs_path);
use lib  dirname(abs_path(__FILE__))."/../lib";
use Cmr::Types;
use Cmr::StartupUtils ();

use Digest::MD5 qw(md5_hex);

my ($log, $config) = Cmr::StartupUtils::script_init({
    'description' => 'Gatekeeper to the cluster, clients and workers connect to the server',
    'config' => "/etc/cmr/config.ini",
   'no_lock' => 1,
});

my $work_request;
my %time_elapsed_avg  :shared;
my %time_elapsed      :shared;
my %jids              :shared;
my %tasks             :shared;
my %jobs              :shared;
my %inactive          :shared;
my %time_added        :shared;
my $state             :shared;


$time_elapsed{'cluster'} = 0;

sub tracker_main;
my $tracker_thread = threads->create(\&tracker_main, {'config' => $config});

sub verify_client;
sub fail_job;

use Fcntl qw/O_RDONLY O_BINARY/;
use NanoMsg::Raw;
use JSON::XS ();

my $s_client = nn_socket(AF_SP, NN_REQ);
nn_bind($s_client, "$config->{'server_in'}");
nn_setsockopt($s_client, NN_SOL_SOCKET, NN_RCVTIMEO, $config->{'work_request_timeout'}*1000);

my $s_worker = nn_socket(AF_SP, NN_REP);
nn_bind($s_worker, "$config->{'server_out'}");

my $s_caster = nn_socket(AF_SP, NN_PUSH);
nn_connect($s_caster, "$config->{'caster_in'}");
nn_setsockopt($s_caster, NN_SOL_SOCKET, NN_SNDBUF, 4*1024*1024);

my $worker_ids = {};
my $worker_slots = {};
my $last_active = {};
my $lie_work = "0:CAKE:{}";
my $no_work = "0:NO_WORK:{}";
my $drought = "";
my $slots_total = 0;


# Main Loop
while(! Cmr::StartupUtils::finished() ) {

  if ( Cmr::StartupUtils::load_config (\$config) ) {
    nn_setsockopt($s_client, NN_SOL_SOCKET, NN_RCVTIMEO, $config->{'work_request_timeout'}*1000);
  }

  # TODO: periodically print debug statistics when debug is turned on

  # -- Get Work Request
  $work_request = undef;
  nn_recv($s_worker, $work_request);

  my $wj = JSON::XS->new->decode($work_request);
  my $now = Time::HiRes::gettimeofday;
  $log->debug("Worker [$wj->{'wid'}] WORK REQUEST");


  # -- Validate work request (discard duplicates)
  $worker_ids->{$wj->{'wid'}} //= -1;

  if ( $worker_ids->{$wj->{'wid'}} == $wj->{'rid'} ) {
    $log->debug("Request is a duplicate of a previous one... Discarded.");
    Time::HiRes::nanosleep( ($config->{'drought_backoff'} // 0.1) * 1e9);
    next;
  }

  $worker_ids->{$wj->{'wid'}} = $wj->{'rid'};

  # -- Update worker statistics
  if ( ! exists($worker_slots->{$wj->{'wid'}}) ) {
      $log->debug("New worker connected ($wj->{'wid'})");
      $log->debug(sprintf("%+d Slots!", $wj->{'slots'}));
      $worker_ids->{$wj->{'wid'}} = $wj->{'rid'};
      $worker_slots->{$wj->{'wid'}} = $wj->{'slots'};
      $slots_total     += $wj->{'slots'};
  }
  elsif ( $wj->{'slots'} != $worker_slots->{$wj->{'wid'}} ) {
      $log->debug("Worker configuration changed!");
      $log->debug(sprintf("%+d Slots!", $wj->{'slots'} - $worker_slots->{$wj->{'wid'}}));
      $slots_total += $wj->{'slots'} - $worker_slots->{$wj->{'wid'}};
      $worker_ids->{$wj->{'wid'}} = $wj->{'rid'};
      $worker_slots->{$wj->{'wid'}} = $wj->{'slots'};
  }
  $last_active->{$wj->{'wid'}} = $now;

  if ($wj->{'slots'} <= 0) {
        nn_send($s_worker, $no_work); # Tell worker we didn't find any work
        last;
  }

  # -- Check all workers for inactivity
  for my $wid (keys %$worker_slots) {
    if ( Time::HiRes::tv_interval ( [$last_active->{$wid}], [$now] ) > $config->{'worker_inactivity_timeout'} ) {
      $log->debug("Worker ($wid) is inactive");
      $log->debug(sprintf("%+d Slots!", -$worker_slots->{$wid}));
      $slots_total -= $worker_slots->{$wid};

      # Broadcast tasks dropped by inactive worker to clients
      for my $task_id (keys %tasks) {
          if ( $tasks{$task_id} eq $wid ) {
              my ($jid, $id) = split(':', $task_id);
              delete $tasks{$task_id};
              dropped_task( $jid, $id, $wid );
          }
      }
      delete $worker_slots->{$wid};
    }
  }

  # -- Cleanup disconnected clients
  for my $jid (keys %inactive) {
    if ( ! exists $jids{$jid} ) {
      $log->debug("Inactive client ($jid) is no longer connected");
      delete $inactive{$jid};
    }
  }


  # -- Check all clients for inactivity
  for my $jid (keys %jids) {
    if ( Time::HiRes::tv_interval ( [$last_active->{$jid}], [$now] ) > $config->{'client_inactivity_timeout'} ) {
      $log->debug("Client ($jid) timed out");
      client_timeout( $jid, 0, 0 );
    }
  }


  # -- Request work from a client
	my $work;
  my $uid;
  my $gid;
  while (!$work) {

    my $timed_out = ( $wj->{'deadline'} - Time::HiRes::gettimeofday ) - 1.0;
    if ( $timed_out <= 0 ) {
        # Don't forward work requests that are about to, or already have expired
        last;
    }

    nn_send($s_client, qq ({"wid":"$wj->{'wid'}","rid":"$wj->{'rid'}"}) );
    my $rc = nn_recv($s_client, my $client_task, 262143);

    if (!$client_task) {
        last;
    }
    my ($jid, $type, $md5, $json ) =  split(":", $client_task, 4);
    $client_task = undef;

    # -- Verify task
    if ( $type ne "TASK" ) {

      if ( &real_job_count() >= 1 ) { # Not sure this check is necessary...
          $inactive{$jid} = 1;
          $log->debug("Client [$jid] has no work!");
      }

      if ($jid eq "") { $log->debug("hmm... jid is empty string, this shouldn't happen"); }

      if ( $drought eq $jid ) {
        # ~ default sleep might be too long... not sure...
        $log->debug("Server taking a nap because none of the clients have any work");
        Time::HiRes::nanosleep( ($config->{'drought_backoff'} // 0.01) * 1e9);
        last;
      }

      $drought = $jid if $drought eq "";

      next;
    }
    $drought = "";
    delete $inactive{$jid}; # This client isn't inactive
    $last_active->{$jid} = $now;

    $log->debug("Client [$jid] has work!");

    # -- Validate task

    my $validate_md5 = md5_hex($json);
    if ( !defined($md5) or ( $md5 ne $validate_md5 ) ) {
        # MD5 mismatch
        # TODO: report as md5 mismatch instead of just a reject
        my $task = JSON::XS->new->decode($json);
        reject_task($task);
        last;
    }

    my $task = JSON::XS->new->decode($json);
    if ($jobs{$jid}) {
      # Client is in cache
      ($uid, $gid) = split(':', $jobs{$jid});
    }
    else {
      $log->debug("Client [$jid] is not in cache, validating...");
      ($uid, $gid) = split(':', get_uidgid($jid, $task));

      if (!defined($uid) || !defined($gid)) {
        $log->debug("Failed to validate client [$jid]");
        fail_job($task);
        last;
      }
      $log->debug("Client [$jid] valid.");

{ lock ($state);
      if (&real_job_count() >= 1) {
        # Adjust cluster elapsed time... get baseline
        my $least_elapsed = -1;
        for my $jid (keys %jids) {
          # Don't include inactive clients in calculation
          if ( !(exists $inactive{$jid}) 
               && (  $least_elapsed == -1 || $time_elapsed{$jid} < $least_elapsed )
             )
          {
            $least_elapsed = $time_elapsed{$jid};
          }
        }
        if ( $least_elapsed > 0 ) {
          for my $jid (keys %jids) {
            my $reclaimed_time = $least_elapsed < $time_elapsed{$jid} ? $least_elapsed : $time_elapsed{$jid};
            $time_elapsed{$jid}      -= $reclaimed_time;
            $time_elapsed{'cluster'} -= $reclaimed_time;
            $time_elapsed{'cluster'} = 0 if $time_elapsed{'cluster'} < 0;
          }
        }
      }
      else {
          # No other clients connected, reset cluster elapsed time
          $time_elapsed{'cluster'} = 0;
      }
} #lock


      $jids{$jid}=$now;
    }

    # -- Respond to server status task (SPECIAL CASE)
    if ($task->{'type'} == &Cmr::Types::CMR_SERVER_STATUS) {
        server_status($task);
        last;
    }

    # -- Respond to  status task (ANOTHER SPECIAL CASE)
    if ($task->{'type'} == &Cmr::Types::CMR_STATUS) {
        broadcast_status($task);
        last;
    }


    # -- Consult Scheduler ( should this task be allowed to run? )
    my $current_job_count = &job_count();
    if ( $current_job_count > 1
         && $time_elapsed{$jid} > ( ($time_elapsed{'cluster'} / $current_job_count) + $config->{'smudge_time'} )
       ) 
    {
        # Nope! job already has its fair share of resources...
        $inactive{$jid} = 1;
        reject_task($task);
        last;
    }

    $work = "${jid}:${type}:${uid}:${gid}:${md5}:${json}";
    $tasks{"$jid:$task->{'id'}"} = $wj->{'wid'};

    # pre-emptively add the amount of time to the cluster that we believe this job will take to complete
    if ( &real_job_count() >= 1 ) {
      my $current_elapsed_avg = $time_elapsed_avg{$jid};
      $time_elapsed{$jid}      += $current_elapsed_avg;
      $time_elapsed{'cluster'} += $current_elapsed_avg;
      $time_added{"$jid:$task->{'id'}"} = $current_elapsed_avg;
    }

    $log->debug("Submitting a " . $Cmr::Types::Task->{$task->{'type'}} . " task [$task->{'jid'}:$task->{'id'}] to worker $wj->{'wid'}");
    $log->debug("$jid - TIME ELAPSED:  $time_elapsed{$jid} / $time_elapsed{'cluster'}");
  }

  # -- Forward work to worker
  $work //= $no_work;
  $log->debug("Sent $work to worker\n");
  nn_send($s_worker, $work);
}

$tracker_thread->join();


sub get_uidgid {
  my ($jid, $task) = @_;

  # Make sure we have required fields
  return if (!$task->{'user'} || !$task->{'pid'});

  # Get user pid/gid
  my (undef, undef, $pwuid, $pwgid, undef, undef, undef, undef, undef) = getpwnam($task->{'user'});

  if ($config->{'anti_spoof'}) {
    # Naively try to confirm the identity of the user (TODO: proper auth)

    # Check user process pid/gid and see if they match
    sysopen(IN, "/proc/$task->{'pid'}/status", O_RDONLY|O_BINARY );
    sysread(IN, my $buf, 262143);
    close(IN);

    my ($uid) = $buf =~ /Uid:\s+\d+\s+(\d+)\s+\d+\s+\d+/o;
    my ($gid) = $buf =~ /Gid:\s+\d+\s+(\d+)\s+\d+\s+\d+/o;

    # Did they match?
    return if ( $pwuid != $uid || $pwgid != $gid ); # Nope!
  }

  # Yep! Cache the result, so we don't keep looking it up
  $jobs{$jid} = "$pwuid:$pwgid";
  $time_elapsed_avg{$jid} //= 0;
  $time_elapsed{$jid} //= 0;

  return $jobs{$jid};
}

sub reject_task {
    my ($task) = @_;

    my $comp = {
        'jid'      => $task->{'jid'},
        'wid'      => $task->{'wid'},
        'id'       => $task->{'id'},
        'type'     => &Cmr::Types::CMR_REJECT,
        'result'   => &Cmr::Types::CMR_RESULT_SERVER_REJECT,
        'warnings' => 0,
        'elapsed'  => 0,
   };

   my $comp_event = JSON::XS->new->encode($comp);

   $log->debug("Client [$task->{'jid'}] Rejected! Quit hogging the cluster!");
   nn_send($s_caster, "$task->{'jid'}:$comp_event");
}

sub dropped_task {
    my ($jid, $id, $wid) = @_;

    my $comp = {
        'jid'      => $jid,
        'wid'      => $wid,
        'id'       => $id,
        'type'     => &Cmr::Types::CMR_REJECT,
        'result'   => &Cmr::Types::CMR_RESULT_WORKER_REJECT,
        'warnings' => 0,
        'elapsed'  => 0,
   };

   my $comp_event = JSON::XS->new->encode($comp);

   $log->debug("Task [$jid:$id] Dropped by worker!");
   nn_send($s_caster, "$jid:$comp_event");
}

sub client_timeout {
    my ($jid, $wid, $id) = @_;

    my $comp = {
        'jid'      => $jid,
        'wid'      => $wid,
        'id'       => $id,
        'type'     => &Cmr::Types::CMR_DISCONNECT,
        'result'   => &Cmr::Types::CMR_RESULT_DISCONNECT,
        'warnings' => 0,
        'elapsed'  => 0,
   };

   my $comp_event = JSON::XS->new->encode($comp);

   $log->debug("Client [$jid] Timed out!");
   nn_send($s_caster, "$jid:$comp_event");
}

sub fail_job {
    my ($task) = @_;

    my $comp = {
        'jid'      => $task->{'jid'},
        'wid'      => $task->{'wid'},
        'id'       => $task->{'id'},
        'type'     => &Cmr::Types::CMR_REJECT,
        'result'   => &Cmr::Types::CMR_RESULT_JOB_FAILURE,
        'warnings' => 0,
        'elapsed'  => 0,
   };

   my $comp_event = JSON::XS->new->encode($comp);

   $log->debug("Client [$task->{'jid'}] Job Failed!");
   nn_send($s_caster, "$task->{'jid'}:$comp_event");
}

sub server_status {
    my ($task) = @_;
    
    my $comp = {
        'jid'      => $task->{'jid'},
        'wid'      => $task->{'wid'},
        'id'       => $task->{'id'},
        'type'     => &Cmr::Types::CMR_SERVER_STATUS,
        'result'   => &Cmr::Types::CMR_RESULT_SERVER_STATUS,
        'workers'  => $worker_slots,
        'warnings' => 0,
        'elapsed'  => 0,
        'times' => { 
            'elapsed'     => \%time_elapsed,
            'elapsed_avg' => \%time_elapsed_avg,
            'added'       => \%time_added,
        },
        'clients'  => \%jids,
        'tasks'    => \%tasks,
        'jobs'     => \%jobs,
        'inactive' => \%inactive,
   };

   my $comp_event = JSON::XS->new->encode($comp);

   $log->debug("Client [$task->{'jid'} Server Status Response!");
   nn_send($s_caster, "$task->{'jid'}:$comp_event");
}

sub broadcast_status {
    my ($task) = @_;

    my $comp = {
        'jid'      => $task->{'jid'},
        'wid'      => $task->{'wid'},
        'id'       => $task->{'id'},
        'type'     => &Cmr::Types::CMR_STATUS,
        'result'   => &Cmr::Types::CMR_RESULT_STATUS,
        'workers'  => $worker_slots,
        'warnings' => 0,
        'elapsed'  => 0,
   };

   my $comp_event = JSON::XS->new->encode($comp);

   $log->debug("Client [$task->{'jid'} Status Response!");
   nn_send($s_caster, "$task->{'jid'}:$comp_event");
}

sub tracker_main {
  my ($args) = @_; 

  use NanoMsg::Raw;
  use JSON::XS ();

  my $config = $args->{'config'};
  my %time_elapsed_samples;

  my $comp_ch = nn_socket(AF_SP, NN_SUB);
  nn_connect($comp_ch, "$config->{'caster_out'}");
  nn_setsockopt($comp_ch, NN_SUB, NN_SUB_SUBSCRIBE, "");

  while(! Cmr::StartupUtils::finished() ) {

    if ( Cmr::StartupUtils::load_config (\$config) ) {
    }

    nn_recv($comp_ch, my $comp_event, 262143);

    my ($jid, $json) = split(":", $comp_event, 2);
    $comp_event = undef;

    my $comp = JSON::XS->new->decode($json);
    next if $comp->{'result'} == &Cmr::Types::CMR_RESULT_ACCEPT;
    next unless exists $jids{$jid};

    delete $tasks{"${jid}:$comp->{'id'}"};

    if ( $time_added{"${jid}:$comp->{'id'}"} ) {
        $time_elapsed{$jid}      += ( $comp->{'elapsed'} - $time_added{"$jid:$comp->{'id'}"} );
        $time_elapsed{'cluster'} += ( $comp->{'elapsed'} - $time_added{"$jid:$comp->{'id'}"} );
    }
    delete $time_added{"${jid}:$comp->{'id'}"};

    if ( $comp->{'type'} == &Cmr::Types::CMR_DISCONNECT ||
         $comp->{'result'} == &Cmr::Types::CMR_RESULT_DISCONNECT ) {

      { lock ($state);

      $log->debug("Client disconnected ($comp->{'jid'})");
      $time_elapsed{'cluster'} -= $time_elapsed{$jid};
      $time_elapsed{'cluster'} = 0 if $time_elapsed{'cluster'} < 0;
      for my $task_id (keys %tasks) {
          if ($task_id =~ /^${jid}/) {
              delete $tasks{$task_id};
              delete $time_added{$task_id};
          }
      }
      delete $time_elapsed_samples{$jid};
      delete $time_elapsed_avg{$jid};
      delete $time_elapsed{$jid};
      delete $jids{$jid};
      delete $inactive{$jid};
      delete $jobs{$jid};

      }

      next;
    }

    if ( &job_count() > 1 && exists($comp->{'elapsed'}) ) {
      $time_elapsed_samples{$jid} //= [];
      unshift @{$time_elapsed_samples{$jid}}, $comp->{'elapsed'};
      if ( scalar(@{$time_elapsed_samples{$jid}}) > 60 ) {
        pop @{$time_elapsed_samples{$jid}};
      }

      $time_elapsed_avg{$jid} = List::Util::sum(@{$time_elapsed_samples{$jid}}) / scalar(@{$time_elapsed_samples{$jid}});
    }

  }
}

sub job_count {
  return (scalar(keys %jids) - scalar(keys %inactive));
}

sub real_job_count {
  return scalar(keys %jids);
}
